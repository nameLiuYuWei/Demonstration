<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- 数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
				<property name="driverClassName" value="com.mysql.jdbc.Driver" />
				<property name="url" value="jdbc:mysql://192.100.140.15:3306/dzswj?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=Hongkong" />
				<property name="username" value="root" />
				<property name="password" value="zkxx#1234" />
		        <!-- 配置初始化大小、最小、最大 -->
		        <property name="maxActive" value="20" />
		        <property name="initialSize" value="1" />
		        <property name="minIdle" value="1" />
		        <!-- maxWait 获取连接等待超时的时间 -->
		        <property name="maxWait" value="60000" />
		        <!-- timeBetweenEvictionRunsMillis 间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		        <property name="timeBetweenEvictionRunsMillis" value="60000" />
		        <!-- minEvictableIdleTimeMillis 一个连接在池中最小空闲的时间，单位是毫秒-->
		        <property name="minEvictableIdleTimeMillis" value="300000" />
		        <!-- 检测连接是否可用的 SQL -->
		        <property name="validationQuery" value="select 1 from dual" />
		        <!-- 是否开启空闲连接检查 -->
		        <property name="testWhileIdle" value="true" />
		        <!-- 是否在获取连接前检查连接状态 -->
		        <property name="testOnBorrow" value="false" />
		        <!-- 是否在归还连接时检查连接状态 -->
		        <property name="testOnReturn" value="false" />
				<property name="filters" value="stat" />
    </bean>
    
     <bean id="log4jdbcInterceptor" class="net.sf.log4jdbc.DataSourceSpyInterceptor" />  
    <bean id="dataSourceLog4jdbcAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">  
       <property name="interceptorNames">  
           <list>  
              <value>log4jdbcInterceptor</value>  
           </list>  
       </property>  
       <property name="beanNames">  
           <list>  
              <value>*dataSource</value>  
           </list>  
       </property>  
    </bean> 
    
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource">
		</property>
	</bean>

	 <bean id="dsjDBExecuter" class="com.zk.dsj.Iservice.impl.DsjDBExecuter">
		<property name="dataSource" ref="dataSource">
		</property>
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath*:com/zk/**/dao/mapper/*.xml" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zk.*" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	

	
	
	<!-- 事务管理 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<tx:annotation-driven transaction-manager="txManager" />

</beans>